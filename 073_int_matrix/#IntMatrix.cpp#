#include "IntMatrix.h"

IntMatrix::IntMatrix(): numRows(0), numColumns(0), rows(NULL){
}

IntMatrix::IntMatrix(int r, int c): numRows(r), numColumns(c), rows(new IntArray*[r]){
  for (int i = 0; i < r; ++i){
    rows[i] = new IntArray[c];
  }
}

IntMatrix::IntMatrix(const IntMatrix & rhs): numRows(rhs.numRows), numColumns(rhs.numColumns), rows(new IntArray*[rhs.numRows]){
  for (int i = 0; i < rhs.numRows; ++i){
    rows[i] = new IntArray[rhs.numColumns];
    for (int j = 0; j < rhs.numColumns; ++j){
      rows[i][j] = rhs.rows[i][j];
    }
  }
}

IntMatrix::~IntMatrix(){
  for (int i = 0; i < numRows; ++i){
    delete[] rows[i];
  }
  delete[] rows;
}

IntMatrix & IntMatrix::operator=(const IntMatrix & rhs){
  for (int i = 0; i < numRows; ++i){
    delete[] rows[i];
  }
  delete[] rows;
  numRows = rhs.numRows;
  numColumns = rhs.numColumns;
  rows = new IntArray*[rhs.numRows];
  for (int i = 0; i < numRows; ++i){
    rows[i] = new IntArray[rhs.numColumns];
    for (int j = 0; j < numColumns; ++j){
      rows[i][j] = rhs.rows[i][j];
    }
  }
}

int IntMatrix::getRows() const{
  return numRows;
}

int IntMatrix::getColumns() const{
  return numColumns;
}

IntArray & IntMatrix::operator[](int index){
  assert(index >= 0 && index < numRows);
  return rows[index];
}

const IntArray & IntMatrix::operator[](int index) const{
  assert(index >= 0 && index < numRows);
  return rows[index];
}

bool IntMatrix::operator==(const IntMatrix & rhs) const{
  if (numRows != rhs.numRows || numColumns != rhs.numColumns){
    return false;
  }
  for (int i = 0; i < numRows; ++i){
    for (int j = 0; j < numColumns; ++j){
      if (rows[i][j] != rhs.rows[i][j]){
	return false;
      }
    }
  }
  return true;
}

IntMatrix IntMatrix::operator+(const IntMatrix & rhs) const {
  assert(numRows == rhs.numRows && numColumns == rhs.numColumns);
  IntMatrix mat = new IntMatrix(rhs.numRows, rhs.numColumns);
  for (int i = 0; i < rhs.numRows; ++i){
    for (int j = 0; j < rhs.numColumns; ++i){
      mat[i][j] = rhs[i][j] + 







