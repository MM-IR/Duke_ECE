#ifndef __T_MATRIX_H___
#define __T_MATRIX_H___

#include <assert.h>
#include <iostream>
#include <vector>
#include <cstdlib>


//YOUR CODE GOES HERE!
template<typename T>
class Matrix{
private:
  int numRows;
  int numColumns;
  std::vector<std::vector<T>> rows;
public:
  Matrix();
  Matrix(int r, int c);
  Matrix(const Matrix & rhs);
  ~Matrix();
  Matrix & operator=(const Matrix & rhs);
  int getRows() const;
  int getColumns() const;
  const std::vector<T> & operator[](int index) const;
  std::vector<T> & operator[](int index);
  bool operator==(const Matrix & rhs) const;
  Matrix operator+(const Matrix & rhs) const;
  template <typename U>
  friend std::ostream& operator <<(std::ostream& s, const Matrix<U>& m);
};


template<typename T>
Matrix::Matrix(): numRows(0), numColumns(0), rows(r){
  for (typename std::vector<std::vector <T> >::)
  
  